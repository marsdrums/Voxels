<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="position" type="vec3" state="POSITION" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="color" type="vec4" state="COLOR" />
	<param name="nearClip" type="float" state="NEAR_CLIP" />
	<param name="farClip" type="float" state="FAR_CLIP" />
	<language name="glsl" version="1.5">
		<bind param="position" program="vp" />
		<bind param="MVP" program="vp" />
		<bind param="color" program="vp" />
		<bind param="nearClip" program="fp" />
		<bind param="farClip" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 MVP;
in vec3 position;
in vec4 color;

out jit_PerVertex {
	flat vec4 color;	
} jit_out;

void main() {	

	gl_Position = MVP * vec4(position, 1.);
	jit_out.color = color;
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

uniform float nearClip, farClip;

in jit_PerVertex {
	flat vec4 color;
} jit_in;

out vec4 color[8];
float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * nearClip * farClip) / (farClip + nearClip - z * (farClip - nearClip));	
}
void main() {



//Here is where i got stuck:
//to fill the 3D texture, i'm sending out 8 2D textures, setting the value 1. in the 
//alpha plane of the voxel texture where a polygon is present. 
//This limits the definition of the grid, since the output array can contain 
//only 8 elements (layers). The ideal thing would be to write these values 
//into a 3D texture directly from the fragment shader

	float z = 2*gl_FragCoord.z - 1.;
	float step = 1. / (farClip - nearClip);
	float z0 = 0.;
	float z1;
	for(int i = 0; i < 8; i++){
		z1 = z0 + step;
		color[i] = z >= z0 && z < z1 ? vec4(1) : vec4(0.);
		z0 = z1;

	}
}	
]]>
		</program>
	</language>
</jittershader>
