<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="position" type="vec3" state="POSITION" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="color" type="vec4" state="COLOR" />
	<param name="farClip" type="float" state="FAR_CLIP" />
	<language name="glsl" version="1.5">
		<bind param="position" program="vp" />
		<bind param="MVP" program="vp" />
		<bind param="color" program="vp" />
		<bind param="farClip" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 MVP;
in vec3 position;
in vec4 color;

out jit_PerVertex {
	flat vec4 color;	
} jit_out;

void main() {	
 	vec3 grid = floor(position*4.) / 4.;
	gl_Position = MVP * vec4(position, 1.);//vec4( (MVP * vec4(position, 1.)).xyz, 1.);	
	jit_out.color = color;
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

uniform float farClip;

in jit_PerVertex {
	flat vec4 color;
} jit_in;

out vec4 color[8];

void main() {

	for(int i = 0; i < 8; i++){
		color[i] = vec4(0.);
	}

	float 	z = gl_FragCoord.z / gl_FragCoord.w;
			z *= 16.;

	int 	index = int(floor(z));
			color[index].rgb = vec3(1.);
			color[index].a = 1.;

	/*
	float step = 1. / 8.;
	for(int i = 0; i < 8; i++){
		float fi = float(i)/8.;
		float z = gl_FragCoord.z / gl_FragCoord.w;
		color[i].a = (z >= fi && z < (fi + step)) ? 1. : 0.;
		color[i].rgb = vec3(1.);
	}
*/
}	
]]>
		</program>
	</language>
</jittershader>
